// Generated by gencpp from file tracking/Tracklets.msg
// DO NOT EDIT!


#ifndef TRACKING_MESSAGE_TRACKLETS_H
#define TRACKING_MESSAGE_TRACKLETS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <tracking/Tracklet.h>

namespace tracking
{
template <class ContainerAllocator>
struct Tracklets_
{
  typedef Tracklets_<ContainerAllocator> Type;

  Tracklets_()
    : tracklets()  {
    }
  Tracklets_(const ContainerAllocator& _alloc)
    : tracklets(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::tracking::Tracklet_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::tracking::Tracklet_<ContainerAllocator> >::other >  _tracklets_type;
  _tracklets_type tracklets;





  typedef boost::shared_ptr< ::tracking::Tracklets_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracking::Tracklets_<ContainerAllocator> const> ConstPtr;

}; // struct Tracklets_

typedef ::tracking::Tracklets_<std::allocator<void> > Tracklets;

typedef boost::shared_ptr< ::tracking::Tracklets > TrackletsPtr;
typedef boost::shared_ptr< ::tracking::Tracklets const> TrackletsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracking::Tracklets_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracking::Tracklets_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tracking::Tracklets_<ContainerAllocator1> & lhs, const ::tracking::Tracklets_<ContainerAllocator2> & rhs)
{
  return lhs.tracklets == rhs.tracklets;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tracking::Tracklets_<ContainerAllocator1> & lhs, const ::tracking::Tracklets_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tracking::Tracklets_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracking::Tracklets_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking::Tracklets_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking::Tracklets_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking::Tracklets_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking::Tracklets_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracking::Tracklets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "09e49bce30706a9a7b107c52941becdc";
  }

  static const char* value(const ::tracking::Tracklets_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x09e49bce30706a9aULL;
  static const uint64_t static_value2 = 0x7b107c52941becdcULL;
};

template<class ContainerAllocator>
struct DataType< ::tracking::Tracklets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracking/Tracklets";
  }

  static const char* value(const ::tracking::Tracklets_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracking::Tracklets_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Tracklets.msg\n"
"## List of tracked bounding boxes\n"
"\n"
"# Header header\n"
"Tracklet[] tracklets\n"
"================================================================================\n"
"MSG: tracking/Tracklet\n"
"# Tracklet.msg\n"
"## Bounding box with class\n"
"\n"
"# ID\n"
"uint8 id\n"
"\n"
"# Bounding box\n"
"float32 x\n"
"float32 y\n"
"float32 w\n"
"float32 h\n"
"\n"
"# class\n"
"uint8 clss\n"
"\n"
"float32 score\n"
;
  }

  static const char* value(const ::tracking::Tracklets_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracking::Tracklets_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tracklets);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tracklets_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracking::Tracklets_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracking::Tracklets_<ContainerAllocator>& v)
  {
    s << indent << "tracklets[]" << std::endl;
    for (size_t i = 0; i < v.tracklets.size(); ++i)
    {
      s << indent << "  tracklets[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::tracking::Tracklet_<ContainerAllocator> >::stream(s, indent + "    ", v.tracklets[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKING_MESSAGE_TRACKLETS_H
