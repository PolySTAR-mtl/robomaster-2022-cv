// Generated by gencpp from file tracking/Tracklet.msg
// DO NOT EDIT!


#ifndef TRACKING_MESSAGE_TRACKLET_H
#define TRACKING_MESSAGE_TRACKLET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace tracking
{
template <class ContainerAllocator>
struct Tracklet_
{
  typedef Tracklet_<ContainerAllocator> Type;

  Tracklet_()
    : id(0)
    , x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)
    , clss(0)
    , score(0.0)  {
    }
  Tracklet_(const ContainerAllocator& _alloc)
    : id(0)
    , x(0.0)
    , y(0.0)
    , w(0.0)
    , h(0.0)
    , clss(0)
    , score(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _w_type;
  _w_type w;

   typedef float _h_type;
  _h_type h;

   typedef uint8_t _clss_type;
  _clss_type clss;

   typedef float _score_type;
  _score_type score;





  typedef boost::shared_ptr< ::tracking::Tracklet_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::tracking::Tracklet_<ContainerAllocator> const> ConstPtr;

}; // struct Tracklet_

typedef ::tracking::Tracklet_<std::allocator<void> > Tracklet;

typedef boost::shared_ptr< ::tracking::Tracklet > TrackletPtr;
typedef boost::shared_ptr< ::tracking::Tracklet const> TrackletConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::tracking::Tracklet_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::tracking::Tracklet_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::tracking::Tracklet_<ContainerAllocator1> & lhs, const ::tracking::Tracklet_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.w == rhs.w &&
    lhs.h == rhs.h &&
    lhs.clss == rhs.clss &&
    lhs.score == rhs.score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::tracking::Tracklet_<ContainerAllocator1> & lhs, const ::tracking::Tracklet_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace tracking

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::tracking::Tracklet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::tracking::Tracklet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking::Tracklet_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::tracking::Tracklet_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking::Tracklet_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::tracking::Tracklet_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::tracking::Tracklet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "59fcd37fcd586a2228c557986fc973a2";
  }

  static const char* value(const ::tracking::Tracklet_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x59fcd37fcd586a22ULL;
  static const uint64_t static_value2 = 0x28c557986fc973a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::tracking::Tracklet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "tracking/Tracklet";
  }

  static const char* value(const ::tracking::Tracklet_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::tracking::Tracklet_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Tracklet.msg\n"
"## Bounding box with class\n"
"\n"
"# ID\n"
"uint8 id\n"
"\n"
"# Bounding box\n"
"float32 x\n"
"float32 y\n"
"float32 w\n"
"float32 h\n"
"\n"
"# class\n"
"uint8 clss\n"
"\n"
"float32 score\n"
;
  }

  static const char* value(const ::tracking::Tracklet_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::tracking::Tracklet_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.w);
      stream.next(m.h);
      stream.next(m.clss);
      stream.next(m.score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tracklet_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::tracking::Tracklet_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::tracking::Tracklet_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "w: ";
    Printer<float>::stream(s, indent + "  ", v.w);
    s << indent << "h: ";
    Printer<float>::stream(s, indent + "  ", v.h);
    s << indent << "clss: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.clss);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRACKING_MESSAGE_TRACKLET_H
