// Generated by gencpp from file serial/HP.msg
// DO NOT EDIT!


#ifndef SERIAL_MESSAGE_HP_H
#define SERIAL_MESSAGE_HP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial
{
template <class ContainerAllocator>
struct HP_
{
  typedef HP_<ContainerAllocator> Type;

  HP_()
    : foe_hero(0)
    , foe_standard1(0)
    , foe_standard2(0)
    , foe_sentry(0)
    , ally_hero(0)
    , ally_standard1(0)
    , ally_standard2(0)
    , ally_sentry(0)  {
    }
  HP_(const ContainerAllocator& _alloc)
    : foe_hero(0)
    , foe_standard1(0)
    , foe_standard2(0)
    , foe_sentry(0)
    , ally_hero(0)
    , ally_standard1(0)
    , ally_standard2(0)
    , ally_sentry(0)  {
  (void)_alloc;
    }



   typedef uint16_t _foe_hero_type;
  _foe_hero_type foe_hero;

   typedef uint16_t _foe_standard1_type;
  _foe_standard1_type foe_standard1;

   typedef uint16_t _foe_standard2_type;
  _foe_standard2_type foe_standard2;

   typedef uint16_t _foe_sentry_type;
  _foe_sentry_type foe_sentry;

   typedef uint16_t _ally_hero_type;
  _ally_hero_type ally_hero;

   typedef uint16_t _ally_standard1_type;
  _ally_standard1_type ally_standard1;

   typedef uint16_t _ally_standard2_type;
  _ally_standard2_type ally_standard2;

   typedef uint16_t _ally_sentry_type;
  _ally_sentry_type ally_sentry;





  typedef boost::shared_ptr< ::serial::HP_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial::HP_<ContainerAllocator> const> ConstPtr;

}; // struct HP_

typedef ::serial::HP_<std::allocator<void> > HP;

typedef boost::shared_ptr< ::serial::HP > HPPtr;
typedef boost::shared_ptr< ::serial::HP const> HPConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial::HP_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial::HP_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial::HP_<ContainerAllocator1> & lhs, const ::serial::HP_<ContainerAllocator2> & rhs)
{
  return lhs.foe_hero == rhs.foe_hero &&
    lhs.foe_standard1 == rhs.foe_standard1 &&
    lhs.foe_standard2 == rhs.foe_standard2 &&
    lhs.foe_sentry == rhs.foe_sentry &&
    lhs.ally_hero == rhs.ally_hero &&
    lhs.ally_standard1 == rhs.ally_standard1 &&
    lhs.ally_standard2 == rhs.ally_standard2 &&
    lhs.ally_sentry == rhs.ally_sentry;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial::HP_<ContainerAllocator1> & lhs, const ::serial::HP_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial::HP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::HP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::HP_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::HP_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::HP_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::HP_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial::HP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f1de7f65b9e758a9b89a73d0d3bd446";
  }

  static const char* value(const ::serial::HP_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f1de7f65b9e758aULL;
  static const uint64_t static_value2 = 0x9b89a73d0d3bd446ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial::HP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial/HP";
  }

  static const char* value(const ::serial::HP_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial::HP_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Rune.msg\n"
"## From CS to CV : Health points of all robots\n"
"\n"
"# Message\n"
"\n"
"uint16 foe_hero\n"
"uint16 foe_standard1\n"
"uint16 foe_standard2\n"
"uint16 foe_sentry\n"
"\n"
"uint16 ally_hero\n"
"uint16 ally_standard1\n"
"uint16 ally_standard2\n"
"uint16 ally_sentry\n"
;
  }

  static const char* value(const ::serial::HP_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial::HP_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.foe_hero);
      stream.next(m.foe_standard1);
      stream.next(m.foe_standard2);
      stream.next(m.foe_sentry);
      stream.next(m.ally_hero);
      stream.next(m.ally_standard1);
      stream.next(m.ally_standard2);
      stream.next(m.ally_sentry);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HP_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial::HP_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial::HP_<ContainerAllocator>& v)
  {
    s << indent << "foe_hero: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.foe_hero);
    s << indent << "foe_standard1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.foe_standard1);
    s << indent << "foe_standard2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.foe_standard2);
    s << indent << "foe_sentry: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.foe_sentry);
    s << indent << "ally_hero: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ally_hero);
    s << indent << "ally_standard1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ally_standard1);
    s << indent << "ally_standard2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ally_standard2);
    s << indent << "ally_sentry: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.ally_sentry);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_MESSAGE_HP_H
