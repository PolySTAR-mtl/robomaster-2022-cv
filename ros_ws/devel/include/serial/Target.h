// Generated by gencpp from file serial/Target.msg
// DO NOT EDIT!


#ifndef SERIAL_MESSAGE_TARGET_H
#define SERIAL_MESSAGE_TARGET_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial
{
template <class ContainerAllocator>
struct Target_
{
  typedef Target_<ContainerAllocator> Type;

  Target_()
    : stamp()
    , located(false)
    , theta(0)
    , phi(0)
    , dist(0)  {
    }
  Target_(const ContainerAllocator& _alloc)
    : stamp()
    , located(false)
    , theta(0)
    , phi(0)
    , dist(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _located_type;
  _located_type located;

   typedef uint16_t _theta_type;
  _theta_type theta;

   typedef int16_t _phi_type;
  _phi_type phi;

   typedef uint16_t _dist_type;
  _dist_type dist;





  typedef boost::shared_ptr< ::serial::Target_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial::Target_<ContainerAllocator> const> ConstPtr;

}; // struct Target_

typedef ::serial::Target_<std::allocator<void> > Target;

typedef boost::shared_ptr< ::serial::Target > TargetPtr;
typedef boost::shared_ptr< ::serial::Target const> TargetConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial::Target_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial::Target_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial::Target_<ContainerAllocator1> & lhs, const ::serial::Target_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.located == rhs.located &&
    lhs.theta == rhs.theta &&
    lhs.phi == rhs.phi &&
    lhs.dist == rhs.dist;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial::Target_<ContainerAllocator1> & lhs, const ::serial::Target_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial::Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::Target_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::Target_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::Target_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::Target_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "31aff261d89d039028ca56aec375fe72";
  }

  static const char* value(const ::serial::Target_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x31aff261d89d0390ULL;
  static const uint64_t static_value2 = 0x28ca56aec375fe72ULL;
};

template<class ContainerAllocator>
struct DataType< ::serial::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial/Target";
  }

  static const char* value(const ::serial::Target_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial::Target_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Target.msg\n"
"## From CV to CS : Coordinates of the current target\n"
"\n"
"# Message\n"
"\n"
"time stamp\n"
"bool located\n"
"\n"
"uint16 theta    # milli-ad\n"
"int16 phi       # millirad\n"
"uint16 dist     # mm\n"
;
  }

  static const char* value(const ::serial::Target_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial::Target_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.located);
      stream.next(m.theta);
      stream.next(m.phi);
      stream.next(m.dist);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Target_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial::Target_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial::Target_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "located: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.located);
    s << indent << "theta: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.theta);
    s << indent << "phi: ";
    Printer<int16_t>::stream(s, indent + "  ", v.phi);
    s << indent << "dist: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.dist);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_MESSAGE_TARGET_H
