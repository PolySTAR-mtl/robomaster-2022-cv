// Generated by gencpp from file serial/SwitchOrder.msg
// DO NOT EDIT!


#ifndef SERIAL_MESSAGE_SWITCHORDER_H
#define SERIAL_MESSAGE_SWITCHORDER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace serial
{
template <class ContainerAllocator>
struct SwitchOrder_
{
  typedef SwitchOrder_<ContainerAllocator> Type;

  SwitchOrder_()
    : stamp()
    , order(0)  {
    }
  SwitchOrder_(const ContainerAllocator& _alloc)
    : stamp()
    , order(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _order_type;
  _order_type order;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ORDER_NOTHING)
  #undef ORDER_NOTHING
#endif
#if defined(_WIN32) && defined(ORDER_NEXT)
  #undef ORDER_NEXT
#endif
#if defined(_WIN32) && defined(ORDER_RIGHT)
  #undef ORDER_RIGHT
#endif
#if defined(_WIN32) && defined(ORDER_LEFT)
  #undef ORDER_LEFT
#endif

  enum {
    ORDER_NOTHING = 0u,
    ORDER_NEXT = 1u,
    ORDER_RIGHT = 2u,
    ORDER_LEFT = 3u,
  };


  typedef boost::shared_ptr< ::serial::SwitchOrder_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::serial::SwitchOrder_<ContainerAllocator> const> ConstPtr;

}; // struct SwitchOrder_

typedef ::serial::SwitchOrder_<std::allocator<void> > SwitchOrder;

typedef boost::shared_ptr< ::serial::SwitchOrder > SwitchOrderPtr;
typedef boost::shared_ptr< ::serial::SwitchOrder const> SwitchOrderConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::serial::SwitchOrder_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::serial::SwitchOrder_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::serial::SwitchOrder_<ContainerAllocator1> & lhs, const ::serial::SwitchOrder_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.order == rhs.order;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::serial::SwitchOrder_<ContainerAllocator1> & lhs, const ::serial::SwitchOrder_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::serial::SwitchOrder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::serial::SwitchOrder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::SwitchOrder_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::serial::SwitchOrder_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::SwitchOrder_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::serial::SwitchOrder_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::serial::SwitchOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7c80d636f2699ea2200782ffddcd7acc";
  }

  static const char* value(const ::serial::SwitchOrder_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7c80d636f2699ea2ULL;
  static const uint64_t static_value2 = 0x200782ffddcd7accULL;
};

template<class ContainerAllocator>
struct DataType< ::serial::SwitchOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "serial/SwitchOrder";
  }

  static const char* value(const ::serial::SwitchOrder_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::serial::SwitchOrder_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# SwitchOrder.msg\n"
"## From CS to CV : switch to a different target\n"
"\n"
"# Constants\n"
"\n"
"uint8 ORDER_NOTHING=0\n"
"uint8 ORDER_NEXT=1\n"
"uint8 ORDER_RIGHT=2\n"
"uint8 ORDER_LEFT=3\n"
"\n"
"# Message\n"
"\n"
"time stamp\n"
"uint8 order\n"
;
  }

  static const char* value(const ::serial::SwitchOrder_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::serial::SwitchOrder_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.order);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SwitchOrder_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::serial::SwitchOrder_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::serial::SwitchOrder_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "order: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.order);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SERIAL_MESSAGE_SWITCHORDER_H
